<?xml version="1.0" encoding="UTF-8"?>
<project name="filesystem-connector" default="build" basedir=".">

  <!-- ========================= PROPERTIES ============================= -->
  <property file="${user.home}/google-enterprise-connector-filesystem.properties" />
  <property file="version.properties" />

  <property name="COMPILE_DEBUG_FLAG" value="true" />
  <property name="COMPILE_DEBUG_LEVEL" value="source,lines,vars" />
  <property name="COMPILE_TARGET" value="1.6" />
  <property name="COMPILE_BOOTCLASSPATH" value="${build.bootclasspath}" />

  <property name="build.dir" value="build" />
  <property name="build-prod.dir" value="${build.dir}/prod" />
  <property name="build-prod-config.dir" value="${build-prod.dir}/config" />
  <property name="build-tests.dir" value="${build.dir}/tests" />

  <property name="classes-prod.dir" value="${build-prod.dir}/classes" />
  <property name="classes-tests.dir" value="${build-tests.dir}/classes" />

  <property name="jar-prod.dir" value="${build-prod.dir}/jar" />
  <property name="jar-prod.file" value="${jar-prod.dir}/connector-filesystem.jar" />

  <property name="javadoc.dir" value="javadoc" />
  <property name="javadoc-prod.dir" value="${javadoc.dir}/prod" />

  <property name="src-prod.dir" value="source/java" />
  <property name="src-tests.dir" value="source/javatests" />

  <property name="license-prod.dir" value="License" />

  <property name="config.dir" value="config" />
  <property name="logging-properties.file" value="${config.dir}/logging.properties" />
  <property name="thirdparty-prod-jar.dir" location="third_party/prod" />

  <property name="copying.file" value="COPYING" />
  <property name="readme.file" value="README" />
  <property name="release-notes.file" value="RELEASE_NOTES" />
  <property name="downloads.dir" value="downloads" />

  <property name="tests.logging.properties"
            location="${classes-tests.dir}/tests.logging.properties"/>

  <property name="connector-manager-projects.dir"
            location="${connector.manager.home}" />
  <property name="connector-manager.dir"
            location="${connector-manager-projects.dir}/connector-manager" />
  <property name="connector-manager-thirdparty-jar.dir"
    location="${connector-manager-projects.dir}/connector-manager/third-party" />
  <property name="connector-manager-thirdparty-prod-jar.dir"
    location="${connector-manager-thirdparty-jar.dir}/prod" />
  <property name="connector-manager-thirdparty-tests-jar.dir"
    location="${connector-manager-thirdparty-jar.dir}/tests" />
  <property name="spi.jar.dir" value="${connector-manager.dir}/dist/jarfile" />

  <!-- =========================== PATHS =============================== -->
  <path id="compile.prod.classpath">
    <fileset dir="${spi.jar.dir}">
      <include name="connector-logging.jar" />
      <include name="connector-spi.jar" />
    </fileset>
    <fileset dir="${thirdparty-prod-jar.dir}">
      <include name="**/*.jar" />
    </fileset>
    <fileset dir="${connector-manager-thirdparty-prod-jar.dir}">
      <include name="**/*.jar" />
    </fileset>
  </path>

  <path id="compile.tests.classpath">
    <path refid="compile.prod.classpath" />
    <fileset dir="${connector-manager-thirdparty-tests-jar.dir}">
      <include name="**/*.jar" />
    </fileset>
    <pathelement location="${jar-prod.file}" />
  </path>

  <!--Cobertura properties -->
  <property file="${config.dir}/build_code_coverage.properties" />

  <path id="cobertura.classpath">
    <fileset dir="${connector-manager.dir}/third-party/cobertura">
      <include name="**/*.jar" />
    </fileset>
  </path>

  <!-- =========================== TASKS =============================== -->
  <include file="${connector-manager-projects.dir}/svnbuild.xml" as="svn"/>

  <target name="build" depends="init,compile,compile_tests,jar">
  </target>

  <target name="init" depends="svn.svn-branch-version">
    <tstamp />
    <property name="downloads.prefix"
              value="connector-filesystem-${svn.branch}"/>
    <property name="connector-filesystem-src.zip"
              value="${downloads.dir}/${downloads.prefix}-src.zip" />

    <mkdir dir="${build.dir}" />
    <mkdir dir="${build-tests.dir}" />
    <mkdir dir="${build-prod.dir}" />
    <mkdir dir="${build-prod-config.dir}" />

    <mkdir dir="${classes-prod.dir}" />
    <mkdir dir="${classes-tests.dir}" />

    <mkdir dir="${jar-prod.dir}" />

    <mkdir dir="${downloads.dir}" />

    <mkdir dir="${javadoc.dir}" />
    <mkdir dir="${javadoc-prod.dir}" />
  </target>

  <target name="compile" depends="init">
    <!-- compile java source files -->
    <javac srcdir="${src-prod.dir}" destdir="${classes-prod.dir}"
           includeantruntime="false"
           debug="${COMPILE_DEBUG_FLAG}"
           debuglevel="${COMPILE_DEBUG_LEVEL}"
           target="${COMPILE_TARGET}" source="${COMPILE_TARGET}">
      <!-- CM JAR Class-Path references are not available. -->
      <compilerarg line="-Xlint -Xlint:-serial -Xlint:-path"/>
      <bootclasspath path="${COMPILE_BOOTCLASSPATH}"/>
      <classpath refid="compile.prod.classpath"/>
    </javac>
  </target>

  <target name="compile_tests" depends="init,jar">
    <!-- compile java source files for tests -->
    <javac srcdir="${src-tests.dir}" destdir="${classes-tests.dir}"
           includeantruntime="false"
           debug="${COMPILE_DEBUG_FLAG}"
           debuglevel="${COMPILE_DEBUG_LEVEL}"
           target="${COMPILE_TARGET}" source="${COMPILE_TARGET}">
      <!-- CM JAR Class-Path references are not available. -->
      <compilerarg line="-Xlint -Xlint:-serial -Xlint:-path"/>
      <bootclasspath path="${COMPILE_BOOTCLASSPATH}"/>
      <classpath refid="compile.tests.classpath"/>
    </javac>
  </target>

  <target name="run_tests">
    <echo message="The run_tests target is deprecated. Use test instead." />
  </target>

  <target name="test" depends="compile_tests,jar,instrument">
    <property name="test.suite" value="*" />
    <mkdir dir="${classes-tests.dir}/com/google/enterprise/connector/filesystem/config"/>

    <copy todir="${classes-tests.dir}/com/google/enterprise/connector/filesystem/config" >
      <fileset dir="${config.dir}" excludes="**/*.properties" />
    </copy>

    <junit printsummary="yes" haltonfailure="no"
           failureproperty="${ant.project.name}.failure">
      <assertions><enable/></assertions>
      <!--
          The instrumented classes reference classes used by the
          Cobertura runtime, so Cobertura and its dependencies
          must be on your classpath.
        -->
      <classpath>
        <pathelement location="${instrumented.dir}" />
        <path refid="cobertura.classpath" />
        <path refid="compile.tests.classpath" />
        <pathelement location="${classes-tests.dir}" />
        <fileset dir="${spi.jar.dir}" includes="**/connector.jar" />
      </classpath>
      <formatter type="xml" />
      <formatter type="brief" usefile="no"/>
      <batchtest todir="${reports.xml.dir}">
        <fileset dir="${test.dir}">
          <include name="**/${test.suite}Test.java" />
        </fileset>
      </batchtest>
    </junit>

    <junitreport todir="${reports.xml.dir}">
      <fileset dir="${reports.xml.dir}">
        <include name="TEST-*.xml" />
      </fileset>
      <report format="frames" todir="${reports.html.dir}" />
    </junitreport>

    <fail if="${ant.project.name}.failure" message="Test failure"/>
  </target>

  <target name="jar" description="Build filesystem-connector-jar"
          depends="compile">
    <copy todir="${build-prod-config.dir}">
      <fileset dir="${config.dir}" excludes="**/*.properties" />
    </copy>

    <copy todir="${classes-prod.dir}/com/google/enterprise/connector/filesystem/config" >
      <fileset dir="${config.dir}" excludes="**/*.xml" />
    </copy>

    <jar jarfile="${jar-prod.file}">
      <fileset dir="source/java" includes="**/*.properties"/>
      <fileset dir="${classes-prod.dir}"/>
      <fileset dir="${build-prod.dir}" includes="config/**"/>
      <fileset dir="${build-prod.dir}" includes="*.properties"/>
      <manifest>
        <attribute name="Implementation-Title"
                   value="Google Search Appliance Connector for File Systems"/>
        <attribute name="Implementation-Version"
                   value="${version} (build ${svn.branch.version} ${TODAY})"/>
        <attribute name="Implementation-Vendor" value="Google Inc."/>
        <attribute name="Specification-Title" value="Connector Manager SPI"/>
        <attribute name="Specification-Version" value="${version.spi}"/>
        <attribute name="Specification-Vendor" value="Google Inc."/>
        <attribute name="Main-Class"
                   value="com.google.enterprise.connector.filesystem.FileConnectorMain" />
      </manifest>
    </jar>
  </target>

  <target name="javadoc" depends="compile"
          description="Create component Javadoc documentation">
      <javadoc sourcepath   ="${src-prod.dir}"
               destdir      ="${javadoc.dir}"
               packagenames ="com.google.enterprise.connector.filesystem"
               author       ="false"
               private      ="true"
               version      ="true"
               doctitle     ="&lt;h2&gt;${product}&lt;/h2&gt;"
               windowtitle  ="${product} (Version ${version})"
               bottom       ="Copyright 2009 Google Inc." >
      <classpath refid="compile.prod.classpath" />
    </javadoc>
  </target>

  <target name="downloads" depends="jar"
          description="Build distribution zip files.">
    <zip destfile="${connector-filesystem-src.zip}" >
      <zipfileset dir="."
        prefix="${downloads.prefix}/projects/file-system-connector"
        includes="${release-notes.file}, ${readme.file}, ${copying.file}, Build_ReadMe.txt, build.xml, config/**/*, third_party/**/*, License/**/*, source/**/*" />
    </zip>
    <checksum algorithm="SHA-1" file="${connector-filesystem-src.zip}" />

    <zip destfile="${downloads.dir}/${downloads.prefix}.zip">
      <zipfileset file="${jar-prod.file}" prefix="${downloads.prefix}" />
      <zipfileset file="${release-notes.file}" prefix="${downloads.prefix}" />
      <zipfileset file="${readme.file}" prefix="${downloads.prefix}" />
      <zipfileset file="${copying.file}" prefix="${downloads.prefix}" />
      <zipfileset file="${logging-properties.file}"
                  prefix="${downloads.prefix}/Config" />
      <!-- Add connector instance xml files for manual upgrade process -->
      <zipfileset file="config/connectorInstance.xml"
                  prefix="${downloads.prefix}/Config" />
      <zipfileset dir="${thirdparty-prod-jar.dir}"
                  prefix="${downloads.prefix}/Lib">
        <include name="**/*.jar" />
      </zipfileset>
      <zipfileset dir="${license-prod.dir}"
                  prefix="${downloads.prefix}/License" />
    </zip>
    <checksum algorithm="SHA-1"
              file="${downloads.dir}/${downloads.prefix}.zip" />
  </target>

  <target name="repackage" depends="init"
          description="Repackage release candidate files for release.">
    <echo message="Repackaging ${svn.branch} as ${version}." />
    <property name="repackage.prefix" value="connector-filesystem-${version}"/>
    <repackage-downloads downloads.dir="${downloads.dir}"
                         downloads.prefix="${downloads.prefix}"
                         repackage.prefix="${repackage.prefix}" />
  </target>

  <target name="clean" description="Deletes all build files.">
    <delete dir="${build.dir}" />
    <delete dir="${downloads.dir}" />
    <delete dir="${javadoc.dir}" />
  </target>

  <!-- Cobertura Tasks -->

  <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />

  <target name="init_code_coverage">
    <mkdir dir="${classes.dir}" />
    <mkdir dir="${instrumented.dir}" />
    <mkdir dir="${reports.xml.dir}" />
    <mkdir dir="${reports.html.dir}" />
    <mkdir dir="${coverage.xml.dir}" />
    <mkdir dir="${coverage.summaryxml.dir}" />
    <mkdir dir="${coverage.html.dir}" />
  </target>

  <target name="compile_code_coverage"
          depends="init_code_coverage,compile,compile_tests" />

  <target name="instrument" depends="compile_code_coverage">
    <!--
        Remove the coverage data file and any old instrumentation.
      -->
    <delete file="cobertura.ser"/>
    <!-- <delete dir="${instrumented.dir}" /> -->

    <cobertura-instrument todir="${instrumented.dir}">
      <!--
          The following line causes instrument to ignore any
          source line containing a reference to log4j, for the
          purposes of coverage reporting.
        -->
      <ignore regex="org.apache.log4j.*" />

      <!-- Cobertura needs prod class dependencies during instrumentation. -->
      <auxClassPath refid="compile.prod.classpath"/>

      <fileset dir="${classes.dir}">
        <!--
            Instrument all the application classes, but
            don't instrument the test classes.
          -->
        <include name="**/*.class" />
        <exclude name="**/*Test.class" />
      </fileset>
    </cobertura-instrument>
  </target>

  <target name="coverage-report">
    <!--
        Generate an XML file containing the coverage data using
        the "srcdir" attribute.
      -->
    <cobertura-report srcdir="${src.dir}" destdir="${coverage.xml.dir}" format="xml" />
  </target>

  <target name="alternate-coverage-report">
    <!--
        Generate a series of HTML files containing the coverage
        data in a user-readable form using nested source filesets.
      -->
    <cobertura-report destdir="${coverage.html.dir}">
      <fileset dir="${src.dir}">
        <include name="**/*.java"/>
      </fileset>
    </cobertura-report>
  </target>

  <target name="clean_code_coverage"
          description="Remove all files created by the build/test process.">
    <delete dir="${classes.dir}" />
    <delete dir="${instrumented.dir}" />
    <delete dir="${reports.dir}" />
    <delete file="cobertura.log" />
    <delete file="cobertura.ser" />
  </target>

  <target name="run_code_coverage"
          depends="test,coverage-report,alternate-coverage-report"
          description="Compile, instrument ourself, run the tests and generate JUnit and coverage reports."/>

  <target name="everything" depends="clean,build,test,downloads"
          description="clean, build, test, downloads" />

</project>

